name: 'Convert to manylinux'
description: 'Converts Linux wheels to manylinux format for compatibility'

inputs:
  wheel-dir:
    required: true
    description: 'Directory containing wheels'
  platform:
    required: false
    description: 'Manylinux platform (e.g., manylinux2014_x86_64)'
    default: 'manylinux2014_x86_64'

runs:
  using: composite
  steps:
    - name: Install auditwheel
      shell: bash
      run: pip install auditwheel
    
    - name: Convert wheels to manylinux
      shell: bash
      run: |
        mkdir -p converted_wheels
        for whl in ${{ inputs.wheel-dir }}/*.whl; do
          # Need to save original filename to handle renaming
          FILENAME=$(basename "$whl")
          
          # If already has manylinux in name but not manylinux2014
          if [[ "$whl" == *"manylinux"* && "$whl" != *"manylinux2014"* ]]; then
            # Create a temporary copy with non-manylinux name so auditwheel will process it
            TEMP_NAME=${FILENAME/manylinux_*/linux_}
            cp "$whl" "${{ inputs.wheel-dir }}/$TEMP_NAME"
            echo "Converting newer manylinux format to ${{ inputs.platform }}: $FILENAME"
            auditwheel repair "${{ inputs.wheel-dir }}/$TEMP_NAME" --plat "${{ inputs.platform }}" -w converted_wheels/
            rm "${{ inputs.wheel-dir }}/$TEMP_NAME"
          elif [[ "$whl" != *"manylinux"* ]]; then
            echo "Converting $whl to ${{ inputs.platform }}"
            auditwheel repair "$whl" --plat "${{ inputs.platform }}" -w converted_wheels/
          else
            echo "Wheel already in target format: $whl"
            cp "$whl" converted_wheels/
          fi
        done
        
        # Replace original wheels with converted ones
        rm -f ${{ inputs.wheel-dir }}/*.whl
        cp converted_wheels/*.whl ${{ inputs.wheel-dir }}/
        
        echo "Converted wheels:"
        ls -la ${{ inputs.wheel-dir }}/*.whl