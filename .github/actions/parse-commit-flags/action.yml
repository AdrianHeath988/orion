name: 'Parse Commit Flags'
description: 'Parses commit messages for the flag [fast].'
inputs:
  python-versions:
    description: 'JSON string of Python versions'
    required: true
  configs:
    description: 'JSON string of configurations'
    required: true
outputs:
  fast-mode:
    description: 'True if [fast] flag is found in commit message'
    value: ${{ steps.check.outputs.fast-mode }}
  python-matrix:
    description: 'Python versions to use in matrix'
    value: ${{ steps.generate-matrix.outputs.python-matrix }}
  config-matrix:
    description: 'Configurations to use in matrix'
    value: ${{ steps.generate-matrix.outputs.config-matrix }}

runs:
  using: "composite"
  steps:
    - name: Check for flags in commit message
      id: check
      shell: bash
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        if [[ "$COMMIT_MSG" == *"[fast]"* ]]; then
          echo "fast-mode=true" >> $GITHUB_OUTPUT
        else
          echo "fast-mode=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate matrix based on flags
      id: generate-matrix
      shell: bash
      run: |
        if [[ "${{ steps.check.outputs.fast-mode }}" == "true" ]]; then
          # For fast mode, only use first Python version and first config
          PYTHON_VERSIONS_JSON='${{ inputs.python-versions }}'
          CONFIGS_JSON='${{ inputs.configs }}'
          
          # Extract first Python version using jq
          FIRST_PYTHON=$(echo $PYTHON_VERSIONS_JSON | jq -c '.[0]')
          echo "python-matrix=[$FIRST_PYTHON]" >> $GITHUB_OUTPUT
          
          # Extract first config using jq
          FIRST_CONFIG=$(echo $CONFIGS_JSON | jq -c '.[0]')
          echo "config-matrix=[$FIRST_CONFIG]" >> $GITHUB_OUTPUT
        else
          # For normal mode, use all versions and configs
          echo "python-matrix=${{ inputs.python-versions }}" >> $GITHUB_OUTPUT
          echo "config-matrix=${{ inputs.configs }}" >> $GITHUB_OUTPUT
        fi