name: 'Setup environment'
description: 'Sets up build dependencies and manylinux Docker build for Linux'

inputs:
  python-version:
    required: true
    description: 'Python version to use'
  architecture:
    required: false
    description: 'CPU architecture (arm64 or x64)'
    default: 'x64'
  manylinux-platform:
    required: false
    description: 'Manylinux platform to use for Linux builds'
    default: 'manylinux2014_x86_64'

runs:
  using: composite
  steps:
    - name: Setup Miniconda (Non-Linux)
      if: runner.os != 'Linux'
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: ${{ inputs.python-version }}
        channels: conda-forge
        architecture: ${{ inputs.architecture }}
        miniconda-version: "latest"
    
    - name: Set up Go (Non-Linux)
      if: runner.os != 'Linux'
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
    
    - name: Configure platform-specific settings (Non-Linux)
      if: runner.os != 'Linux'
      shell: bash -l {0}
      run: |
        # macOS-specific Go configuration
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
          if [[ "${{ inputs.architecture }}" == "arm64" ]]; then
            echo "GOARCH=arm64" >> $GITHUB_ENV
          else
            echo "GOARCH=amd64" >> $GITHUB_ENV
          fi
        fi
        
        # Windows-specific Poetry path
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
        fi
    
    - name: Build in manylinux Docker container (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        # Setup Docker volume mounts
        REPO_DIR=$(pwd)
        
        # Map Python version to cp tag
        PY_VERSION="${{ inputs.python-version }}"
        PY_VERSION_NO_DOT="${PY_VERSION//./}"
        CP_TAG="cp${PY_VERSION_NO_DOT:0:2}${PY_VERSION_NO_DOT:0:2}"
        
        # Run build in manylinux container
        docker run --rm \
          -v "${REPO_DIR}:/io" \
          -w /io \
          quay.io/pypa/${{ inputs.manylinux-platform }} \
          /bin/bash -c "
            # Install Go
            curl -OL https://golang.org/dl/go1.21.0.linux-amd64.tar.gz
            tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
            export PATH=\$PATH:/usr/local/go/bin
            
            # Configure Go to disable VCS stamping
            export GOFLAGS='-buildvcs=false'
            
            # Find the Python binary for the specified version
            PYTHON_BIN=\$(find /opt/python/${CP_TAG}* -name python -type f | head -n 1)
            PIP_BIN=\$(find /opt/python/${CP_TAG}* -name pip -type f | head -n 1)
            
            echo \"Using Python: \$PYTHON_BIN\"
            echo \"Using pip: \$PIP_BIN\"
            
            # Install Python dependencies
            \$PIP_BIN install poetry
            
            # Build the package
            \$PYTHON_BIN -m poetry build
            
            # Fix permissions of generated files
            chown -R $(id -u):$(id -g) /io/dist
          "