name: Build and Publish

on:
  push:
    branches: [main, dev]
  pull_request:

permissions:
  contents: write

jobs:
  # In order to build general manylinux wheels that support older Linux
  # distributions, we'll need to use Docker. 
  build-manylinux:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"] #, "3.10", "3.11", "3.12"]
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
            
      - name: Build with manylinux action
        uses: ./.github/actions/build-manylinux
        with:
          python-version: ${{ matrix.python-version }}

      - name: upload linux wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-manylinux2014-py${{ matrix.python-version }}-x64
          path: wheelhouse/*.whl

  # For all other operating systems we support (Windows, Mac Intel
  # and Apple Silicon) we can use the default machines GitHub actions 
  # gives us. 
  build-other:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # - {os: windows-latest, arch: "x64"}
          # - {os: macos-latest, arch: "x64"}
          - {os: macos-latest, arch: "arm64"}
        python-version: ["3.9"] #, "3.10", "3.11", "3.12"]
    
    steps:
      - name: checkout orion repository
        uses: actions/checkout@v4

      # Conda is necessary else we can't build Mac M1+ on Python
      # versions < 3.11.
      - name: setup python
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.config.arch }}
          auto-activate-base: true
      
      - name: set up golang
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'

      - name: Set venv python path
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "VENV_PYTHON=.venv\\Scripts\\python.exe" >> $GITHUB_ENV
          else
            echo "VENV_PYTHON=.venv/bin/python" >> $GITHUB_ENV
          fi

      - name: install uv and build orion package
        shell: bash
        run: |
          pip install uv
          uv venv --python ${{ matrix.python-version }}          
          uv build --sdist --wheel --out-dir dist --python $VENV_PYTHON

          echo "Contents of the wheel file:"
          unzip -l dist/*.whl

      - name: Upload built wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.config.os }}-py${{ matrix.python-version }}-${{ matrix.config.arch }}
          path: dist/*.whl

  # Now we can test the wheels we just created. We'll do this by pulling
  # all wheels added as artifacts in the previous steps. 
  test:
    needs: [build-manylinux, build-other]
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # - {os: ubuntu-latest, arch: "x64"}
          # - {os: windows-latest, arch: "x64"}
          # - {os: macos-latest, arch: "x64"}
          - {os: macos-latest, arch: "arm64"}
        python-version: ["3.9"] #, "3.10", "3.11", "3.12"]
    
    steps:
      - name: checkout orion repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: download artifact wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist/
          merge-multiple: true

      - name: Set venv python path
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "VENV_PYTHON=.venv\\Scripts\\python.exe" >> $GITHUB_ENV
          else
            echo "VENV_PYTHON=.venv/bin/python" >> $GITHUB_ENV
          fi

      - name: install uv and create venv
        shell: bash 
        run: |
          pip install uv
          uv venv --python ${{ matrix.python-version }}
            
      - name: install packages
        shell: bash
        run: |
          uv pip install --find-links=dist orion-fhe pytest pytest-cov --python $VENV_PYTHON

      - name: run pytest from clean directory
        shell: bash 
        run: |
          cd $RUNNER_TEMP
          echo "Testing from directory: $RUNNER_TEMP"
          $GITHUB_WORKSPACE/$VENV_PYTHON -m pytest $GITHUB_WORKSPACE/tests/

  publish:
    needs: [test]
    runs-on: ${{ matrix.config.os }}
    if: github.event_name == 'push' #&& github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest, arch: "x64"}
          - {os: windows-latest, arch: "x64"}
          - {os: macos-latest, arch: "x64"}
          - {os: macos-latest, arch: "arm64"}
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Conda is necessary else we can't build Mac M1+ on Python
      # versions < 3.11.
      - name: setup python
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.config.arch }}
          auto-activate-base: true
                  
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist/
          merge-multiple: true
      
      - name: Publish to TestPyPI
        run: |
          uv pip install poetry --python $VENV_PYTHON
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.PYPI_API_TOKEN }}
          poetry publish --repository testpypi --skip-existing
