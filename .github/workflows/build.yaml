
name: Build and Publish

on:
  push:
    branches: [main, dev]
  pull_request:

permissions:
  contents: write
jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest, arch: "x64"}
          # - {os: windows-latest, arch: "x64"}
          # - {os: macos-latest, arch: "x64"}
          # - {os: macos-latest, arch: "arm64"}
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
            
      - name: Install uv
        shell: bash -l {0}
        run: |
          pip install uv
      
      - name: Build package
        shell: bash -l {0}
        run: |
          uv pip install -e . # generates .so/dylib/dll file first
          uv build --sdist --wheel --out-dir dist

      - name: Inspect wheel contents
        shell: bash -l {0}
        run: |
          echo "Listing contents of generated wheel files:"
          for wheel in dist/*.whl; do
            echo "Contents of $wheel:"
            unzip -l "$wheel"
          done
            
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: >-
            wheels-${{ matrix.config.os }}-py${{ matrix.python-version }}-${{ matrix.config.arch }}
          path: dist/*.whl

  test:
    needs: build
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-latest, arch: "x64"}
          # - {os: windows-latest, arch: "x64"}
          # - {os: macos-latest, arch: "x64"}
          # - {os: macos-latest, arch: "arm64"}
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup test environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.config.arch }}
      
      - name: Install Tox
        shell: bash -l {0}
        run: |
          uv pip install tox tox-conda tox-gh-actions
      
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: >-
            wheels-${{ matrix.config.os }}-py${{ matrix.python-version }}-${{ matrix.config.arch }}
          path: dist
      
      - name: Install wheel
        shell: bash -l {0}
        run: |
          uv pip install --find-links=dist orion-fhe
      
      - name: Run tests with Tox
        shell: bash -l {0}
        run: tox
        working-directory: .

  publish:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install uv
        run: |
          pip install uv
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist/
          merge-multiple: true
      
      - name: List files to publish
        run: find dist -type f | sort
      
      - name: Publish to TestPyPI
        run: |
          uv pip install twine
          python -m twine upload --repository-url https://test.pypi.org/legacy/ --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} --skip-existing dist/*
